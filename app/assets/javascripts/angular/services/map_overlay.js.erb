map_overlay.prototype = new google.maps.OverlayView();
map_overlay.prototype.onAdd = function() {
  var that = this;
  var path_kml = this.element.data('kml');
  this.div = d3.select(this.getPanes().overlayLayer).append("div").attr("class", "d3map");
  this.svg = this.div.append('svg:svg');

  $.ajax("<%= asset_path 'metu-campus-pick-up-sites.kml'%>").done(function(xml) {
    var kml_as_json = toGeoJSON.kml(xml);
    that.containers_data = kml_as_json.features;
    that.addContainers();
    that.draw();
  });

  $.ajax(path_kml).done(function(xml) {
    var kml_as_json = toGeoJSON.kml(xml);
    that.path_data = kml_as_json.features;
    that.addPath();
    that.draw();
  });

  this.addTruck();
}

map_overlay.prototype.onRemove = function() {}

map_overlay.prototype.draw = function() {
  var bounds = this.gmap.getBounds();
  var ne = bounds.getNorthEast(),
      sw = bounds.getSouthWest();
  var overlayProjection = this.getProjection();
  var swc = overlayProjection.fromLatLngToDivPixel(sw);
  var nec = overlayProjection.fromLatLngToDivPixel(ne);
  $(this.div[0]).css('left', swc.x + 'px');
  $(this.div[0]).css('top', nec.y + 'px');
  $(this.div[0]).css('width', (nec.x - swc.x) + 'px');
  $(this.div[0]).css('height', (swc.y - nec.y) + 'px');

  var googleMapProjection = function(coordinates) {
      var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
      var pixelCoordinates = overlayProjection.fromLatLngToContainerPixel(googleCoordinates);
      return [pixelCoordinates.x, pixelCoordinates.y];
  }
  
  var path = d3.geo.path().projection(googleMapProjection);
  this.svg.selectAll('path').attr('d', path);

  // Update all circles
  var that = this;
  this.truck.attr({
    transform: function () {
      return "translate(" + [10, 10] + ")";
    }
  });

  if(!this.containers) return;
  this.containers.selectAll(".container").attr({
    transform: function (d) {
      var latLon = new google.maps.LatLng(d.geometry.coordinates[1], d.geometry.coordinates[0]);
      var rr = overlayProjection.fromLatLngToContainerPixel(latLon);
      return "translate(" + [rr.x, rr.y] + ")";
    }
  });
}

map_overlay.prototype.addPath = function() {
  var overlay_projection = this.getProjection();
  var path_element = this.svg.append("svg:g").attr("class", "path");
  var googleMapProjection = function(coordinates) {
      var googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
      var pixelCoordinates = overlay_projection.fromLatLngToDivPixel(googleCoordinates);
      return [pixelCoordinates.x, pixelCoordinates.y];
  }
  var path = d3.geo.path().projection(googleMapProjection);

  path_element.selectAll("path").data(this.path_data).enter().append("svg:path").attr("d", path).attr('class', 'path').attr('z-index', 0);
}

map_overlay.prototype.addContainers = function() {
  this.containers = this.svg.append("svg:g").attr("class", "containers");
  this.containers.selectAll(".container")
        .data(this.containers_data)
        .enter().append("svg:circle")
	.attr({ r: 10 })
        .attr('opacity', function(d) { 
          var myRegexp = /(\d+)/;
          var match = myRegexp.exec(d.properties.description);
          if(match[1] == 100) {
            return 1.0;
          } else {
            return parseFloat(match[1]) / 100.0 * 0.6;
          }
         })
        .attr('class', 'container').attr('z-index', 1);
}

map_overlay.prototype.addTruck = function() {
  this.truck = this.svg.append("svg:g").append("circle").attr('class', 'truck').attr({ r: 10 }).attr('z-index', 2);
}

map_overlay.prototype.setTime = function(time) {
  this.pathNode = this.svg.selectAll('path').node();
  this.pathLength = this.pathNode.getTotalLength();
  var p = this.pathNode.getPointAtLength(this.pathLength);
  this.time += (this.speed * 0.000277777778 * 30.0 / this.gmap.getMapScale() / this.pathLength);
  if (this.time < -1.0) {
    this.completed = true;
  }
  var that = this;
  this.truck.transition()
      .duration(30).ease("linear").attr({
      transform: function () {
        that.nT = that.pathLength * that.time * -1;
        var p = that.pathNode.getPointAtLength(that.nT);
        return "translate(" + [p.x, p.y] + ")";
      }
    });
}

map_overlay.prototype.setSpeed = function(speed) {
  this.speed = parseFloat(speed);
}

function map_overlay(map, element) {
  this.gmap = map;
  this.time = 0;
  this.speed = 50;
  this.element = element;
  this.nT = 0.0;
}

sgApp.factory('map_overlay', function ($rootScope) {
  return map_overlay;
});
