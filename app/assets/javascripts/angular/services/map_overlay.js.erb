map_overlay.prototype = new google.maps.OverlayView();
map_overlay.prototype.onAdd = function() {
  var that = this;
  this.div = d3.select(this.getPanes().overlayLayer).append("div").attr("class", "d3map");
  this.svg = this.div.append('svg:svg');
  this.addTruck();

  $.ajax("<%= asset_path 'metu-campus-pick-up-sites.kml'%>").done(function(xml) {
    var kml_as_json = toGeoJSON.kml(xml);
    that.containers_data = kml_as_json.features;
    that.addContainers();
    that.draw();
  });
}
map_overlay.prototype.onRemove = function() {}
map_overlay.prototype.draw = function() {
  var bounds = this.gmap.getBounds();
  var ne = bounds.getNorthEast(),
      sw = bounds.getSouthWest();
  var overlayProjection = this.getProjection();
  var swc = overlayProjection.fromLatLngToDivPixel(sw);
  var nec = overlayProjection.fromLatLngToDivPixel(ne);
  $(this.div[0]).css('left', swc.x + 'px');
  $(this.div[0]).css('top', nec.y + 'px');
  $(this.div[0]).css('width', (nec.x - swc.x) + 'px');
  $(this.div[0]).css('height', (swc.y - nec.y) + 'px');

  // Update all circles
  var that = this;
  this.truck.attr({
        transform: function () {
          return "translate(" + [10, 10] + ")";
        }
      });

  if(!this.containers) return;
  this.containers.selectAll(".container").attr({
        transform: function (d) {
          var latLon = new google.maps.LatLng(d.geometry.coordinates[1], d.geometry.coordinates[0]);
	  var rr = overlayProjection.fromLatLngToContainerPixel(latLon);
          return "translate(" + [rr.x, rr.y] + ")";
        }
      });
}

map_overlay.prototype.addTruck = function() {
  this.truck = this.svg.append("circle").attr('class', 'truck').attr({ r: 10 });
}
map_overlay.prototype.addContainers = function() {
  this.containers = this.svg.append("svg:g").attr("class", "containers");
  this.containers.selectAll(".container")
        .data(this.containers_data)
        .enter().append("svg:circle")
	.attr({ r: 10 })
        .attr('opacity', function(d) { 
          var myRegexp = /(\d+)/;
          var match = myRegexp.exec(d.properties.description);
          return parseFloat(match[1]) / 100.0;
         })
        .attr('class', 'container');
}

function map_overlay(map) {
  this.gmap = map;

}

sgApp.factory('map_overlay', function ($rootScope) {
  return map_overlay;
});
